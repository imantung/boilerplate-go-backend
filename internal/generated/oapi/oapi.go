// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Employee defines model for Employee.
type Employee struct {
	Id             int        `json:"id"`
	JobTitle       *string    `json:"job_title,omitempty"`
	LastClockInAt  *time.Time `json:"last_clock_in_at,omitempty"`
	LastClockOutAt *time.Time `json:"last_clock_out_at,omitempty"`
	Name           string     `json:"name"`
}

// EmployeeClockHistories defines model for EmployeeClockHistories.
type EmployeeClockHistories = []EmployeeClockHistory

// EmployeeClockHistory defines model for EmployeeClockHistory.
type EmployeeClockHistory struct {
	ClockInAt           *time.Time `json:"clock_in_at,omitempty"`
	ClockOutAt          *time.Time `json:"clock_out_at,omitempty"`
	EmployeeId          *int       `json:"employee_id,omitempty"`
	Id                  int        `json:"id"`
	WorkDuration        *string    `json:"work_duration,omitempty"`
	WorkDurationMinutes *int       `json:"work_duration_minutes,omitempty"`
}

// Employees defines model for Employees.
type Employees = []Employee

// Error defines model for Error.
type Error struct {
	ErrorMessage string `json:"error_message"`
}

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// UnexpectedError defines model for UnexpectedError.
type UnexpectedError = Error

// CreateEmployeeJSONBody defines parameters for CreateEmployee.
type CreateEmployeeJSONBody struct {
	JobTitle *string `json:"job_title,omitempty"`
	Name     string  `json:"name"`
}

// CreateEmployeeJSONRequestBody defines body for CreateEmployee for application/json ContentType.
type CreateEmployeeJSONRequestBody CreateEmployeeJSONBody

// UpdateEmployeeJSONRequestBody defines body for UpdateEmployee for application/json ContentType.
type UpdateEmployeeJSONRequestBody = Employee

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of employee.
	// (GET /employees)
	ListEmployee(ctx echo.Context) error
	// Create new employee
	// (POST /employees)
	CreateEmployee(ctx echo.Context) error
	// Delete employee by ID
	// (DELETE /employees/{id})
	DeleteEmployee(ctx echo.Context, id int64) error
	// Get employee by ID
	// (GET /employees/{id})
	GetEmployee(ctx echo.Context, id int64) error
	// Partially update employee
	// (PATCH /employees/{id})
	PatchEmployee(ctx echo.Context, id int64) error
	// Update employee
	// (PUT /employees/{id})
	UpdateEmployee(ctx echo.Context, id int64) error
	// Employee start to work
	// (POST /employees/{id}/clock-in)
	ClockIn(ctx echo.Context, id int64) error
	// Employee stop to work
	// (POST /employees/{id}/clock-out)
	ClockOut(ctx echo.Context, id int64) error
	// Get employee clock history
	// (GET /employees/{id}/clocks)
	ListEmployeeClockHistory(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) ListEmployee(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListEmployee(ctx)
	return err
}

// CreateEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEmployee(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateEmployee(ctx)
	return err
}

// DeleteEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEmployee(ctx, id)
	return err
}

// GetEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployee(ctx, id)
	return err
}

// PatchEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEmployee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEmployee(ctx, id)
	return err
}

// UpdateEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEmployee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateEmployee(ctx, id)
	return err
}

// ClockIn converts echo context to params.
func (w *ServerInterfaceWrapper) ClockIn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"client"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClockIn(ctx, id)
	return err
}

// ClockOut converts echo context to params.
func (w *ServerInterfaceWrapper) ClockOut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"client"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ClockOut(ctx, id)
	return err
}

// ListEmployeeClockHistory converts echo context to params.
func (w *ServerInterfaceWrapper) ListEmployeeClockHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice", "client"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListEmployeeClockHistory(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/employees", wrapper.ListEmployee)
	router.POST(baseURL+"/employees", wrapper.CreateEmployee)
	router.DELETE(baseURL+"/employees/:id", wrapper.DeleteEmployee)
	router.GET(baseURL+"/employees/:id", wrapper.GetEmployee)
	router.PATCH(baseURL+"/employees/:id", wrapper.PatchEmployee)
	router.PUT(baseURL+"/employees/:id", wrapper.UpdateEmployee)
	router.POST(baseURL+"/employees/:id/clock-in", wrapper.ClockIn)
	router.POST(baseURL+"/employees/:id/clock-out", wrapper.ClockOut)
	router.GET(baseURL+"/employees/:id/clocks", wrapper.ListEmployeeClockHistory)

}

type NotFoundJSONResponse Error

type UnauthorizedJSONResponse Error

type UnexpectedErrorJSONResponse Error

type ListEmployeeRequestObject struct {
}

type ListEmployeeResponseObject interface {
	VisitListEmployeeResponse(w http.ResponseWriter) error
}

type ListEmployee200JSONResponse Employees

func (response ListEmployee200JSONResponse) VisitListEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListEmployee401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ListEmployee401JSONResponse) VisitListEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListEmployeedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListEmployeedefaultJSONResponse) VisitListEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEmployeeRequestObject struct {
	Body *CreateEmployeeJSONRequestBody
}

type CreateEmployeeResponseObject interface {
	VisitCreateEmployeeResponse(w http.ResponseWriter) error
}

type CreateEmployee201ResponseHeaders struct {
	Location string
}

type CreateEmployee201Response struct {
	Headers CreateEmployee201ResponseHeaders
}

func (response CreateEmployee201Response) VisitCreateEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)
	return nil
}

type CreateEmployee401JSONResponse struct{ UnauthorizedJSONResponse }

func (response CreateEmployee401JSONResponse) VisitCreateEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateEmployeedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateEmployeedefaultJSONResponse) VisitCreateEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteEmployeeRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteEmployeeResponseObject interface {
	VisitDeleteEmployeeResponse(w http.ResponseWriter) error
}

type DeleteEmployee204Response struct {
}

func (response DeleteEmployee204Response) VisitDeleteEmployeeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEmployee401JSONResponse struct{ UnauthorizedJSONResponse }

func (response DeleteEmployee401JSONResponse) VisitDeleteEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEmployee404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteEmployee404JSONResponse) VisitDeleteEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEmployeedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteEmployeedefaultJSONResponse) VisitDeleteEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEmployeeRequestObject struct {
	Id int64 `json:"id"`
}

type GetEmployeeResponseObject interface {
	VisitGetEmployeeResponse(w http.ResponseWriter) error
}

type GetEmployee200JSONResponse Employee

func (response GetEmployee200JSONResponse) VisitGetEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEmployee401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetEmployee401JSONResponse) VisitGetEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetEmployee404JSONResponse struct{ NotFoundJSONResponse }

func (response GetEmployee404JSONResponse) VisitGetEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEmployeedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetEmployeedefaultJSONResponse) VisitGetEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PatchEmployeeRequestObject struct {
	Id int64 `json:"id"`
}

type PatchEmployeeResponseObject interface {
	VisitPatchEmployeeResponse(w http.ResponseWriter) error
}

type PatchEmployee204Response struct {
}

func (response PatchEmployee204Response) VisitPatchEmployeeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PatchEmployee401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PatchEmployee401JSONResponse) VisitPatchEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchEmployee404JSONResponse struct{ NotFoundJSONResponse }

func (response PatchEmployee404JSONResponse) VisitPatchEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchEmployeedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PatchEmployeedefaultJSONResponse) VisitPatchEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateEmployeeRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateEmployeeJSONRequestBody
}

type UpdateEmployeeResponseObject interface {
	VisitUpdateEmployeeResponse(w http.ResponseWriter) error
}

type UpdateEmployee204Response struct {
}

func (response UpdateEmployee204Response) VisitUpdateEmployeeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateEmployee401JSONResponse struct{ UnauthorizedJSONResponse }

func (response UpdateEmployee401JSONResponse) VisitUpdateEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEmployee404JSONResponse struct{ NotFoundJSONResponse }

func (response UpdateEmployee404JSONResponse) VisitUpdateEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEmployeedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateEmployeedefaultJSONResponse) VisitUpdateEmployeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClockInRequestObject struct {
	Id int64 `json:"id"`
}

type ClockInResponseObject interface {
	VisitClockInResponse(w http.ResponseWriter) error
}

type ClockIn200JSONResponse EmployeeClockHistory

func (response ClockIn200JSONResponse) VisitClockInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClockIn401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ClockIn401JSONResponse) VisitClockInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ClockIn404JSONResponse struct{ NotFoundJSONResponse }

func (response ClockIn404JSONResponse) VisitClockInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ClockIndefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ClockIndefaultJSONResponse) VisitClockInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClockOutRequestObject struct {
	Id int64 `json:"id"`
}

type ClockOutResponseObject interface {
	VisitClockOutResponse(w http.ResponseWriter) error
}

type ClockOut200JSONResponse EmployeeClockHistory

func (response ClockOut200JSONResponse) VisitClockOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClockOut401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ClockOut401JSONResponse) VisitClockOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ClockOut404JSONResponse struct{ NotFoundJSONResponse }

func (response ClockOut404JSONResponse) VisitClockOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ClockOutdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ClockOutdefaultJSONResponse) VisitClockOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListEmployeeClockHistoryRequestObject struct {
	Id int64 `json:"id"`
}

type ListEmployeeClockHistoryResponseObject interface {
	VisitListEmployeeClockHistoryResponse(w http.ResponseWriter) error
}

type ListEmployeeClockHistory200JSONResponse EmployeeClockHistories

func (response ListEmployeeClockHistory200JSONResponse) VisitListEmployeeClockHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListEmployeeClockHistory401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ListEmployeeClockHistory401JSONResponse) VisitListEmployeeClockHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListEmployeeClockHistory404JSONResponse struct{ NotFoundJSONResponse }

func (response ListEmployeeClockHistory404JSONResponse) VisitListEmployeeClockHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListEmployeeClockHistorydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListEmployeeClockHistorydefaultJSONResponse) VisitListEmployeeClockHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns a list of employee.
	// (GET /employees)
	ListEmployee(ctx context.Context, request ListEmployeeRequestObject) (ListEmployeeResponseObject, error)
	// Create new employee
	// (POST /employees)
	CreateEmployee(ctx context.Context, request CreateEmployeeRequestObject) (CreateEmployeeResponseObject, error)
	// Delete employee by ID
	// (DELETE /employees/{id})
	DeleteEmployee(ctx context.Context, request DeleteEmployeeRequestObject) (DeleteEmployeeResponseObject, error)
	// Get employee by ID
	// (GET /employees/{id})
	GetEmployee(ctx context.Context, request GetEmployeeRequestObject) (GetEmployeeResponseObject, error)
	// Partially update employee
	// (PATCH /employees/{id})
	PatchEmployee(ctx context.Context, request PatchEmployeeRequestObject) (PatchEmployeeResponseObject, error)
	// Update employee
	// (PUT /employees/{id})
	UpdateEmployee(ctx context.Context, request UpdateEmployeeRequestObject) (UpdateEmployeeResponseObject, error)
	// Employee start to work
	// (POST /employees/{id}/clock-in)
	ClockIn(ctx context.Context, request ClockInRequestObject) (ClockInResponseObject, error)
	// Employee stop to work
	// (POST /employees/{id}/clock-out)
	ClockOut(ctx context.Context, request ClockOutRequestObject) (ClockOutResponseObject, error)
	// Get employee clock history
	// (GET /employees/{id}/clocks)
	ListEmployeeClockHistory(ctx context.Context, request ListEmployeeClockHistoryRequestObject) (ListEmployeeClockHistoryResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListEmployee operation middleware
func (sh *strictHandler) ListEmployee(ctx echo.Context) error {
	var request ListEmployeeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListEmployee(ctx.Request().Context(), request.(ListEmployeeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListEmployee")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListEmployeeResponseObject); ok {
		return validResponse.VisitListEmployeeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateEmployee operation middleware
func (sh *strictHandler) CreateEmployee(ctx echo.Context) error {
	var request CreateEmployeeRequestObject

	var body CreateEmployeeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEmployee(ctx.Request().Context(), request.(CreateEmployeeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEmployee")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateEmployeeResponseObject); ok {
		return validResponse.VisitCreateEmployeeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteEmployee operation middleware
func (sh *strictHandler) DeleteEmployee(ctx echo.Context, id int64) error {
	var request DeleteEmployeeRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEmployee(ctx.Request().Context(), request.(DeleteEmployeeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEmployee")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteEmployeeResponseObject); ok {
		return validResponse.VisitDeleteEmployeeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEmployee operation middleware
func (sh *strictHandler) GetEmployee(ctx echo.Context, id int64) error {
	var request GetEmployeeRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEmployee(ctx.Request().Context(), request.(GetEmployeeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEmployee")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEmployeeResponseObject); ok {
		return validResponse.VisitGetEmployeeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchEmployee operation middleware
func (sh *strictHandler) PatchEmployee(ctx echo.Context, id int64) error {
	var request PatchEmployeeRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchEmployee(ctx.Request().Context(), request.(PatchEmployeeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchEmployee")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchEmployeeResponseObject); ok {
		return validResponse.VisitPatchEmployeeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateEmployee operation middleware
func (sh *strictHandler) UpdateEmployee(ctx echo.Context, id int64) error {
	var request UpdateEmployeeRequestObject

	request.Id = id

	var body UpdateEmployeeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEmployee(ctx.Request().Context(), request.(UpdateEmployeeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEmployee")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateEmployeeResponseObject); ok {
		return validResponse.VisitUpdateEmployeeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClockIn operation middleware
func (sh *strictHandler) ClockIn(ctx echo.Context, id int64) error {
	var request ClockInRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClockIn(ctx.Request().Context(), request.(ClockInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClockIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClockInResponseObject); ok {
		return validResponse.VisitClockInResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ClockOut operation middleware
func (sh *strictHandler) ClockOut(ctx echo.Context, id int64) error {
	var request ClockOutRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClockOut(ctx.Request().Context(), request.(ClockOutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClockOut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ClockOutResponseObject); ok {
		return validResponse.VisitClockOutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListEmployeeClockHistory operation middleware
func (sh *strictHandler) ListEmployeeClockHistory(ctx echo.Context, id int64) error {
	var request ListEmployeeClockHistoryRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListEmployeeClockHistory(ctx.Request().Context(), request.(ListEmployeeClockHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListEmployeeClockHistory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListEmployeeClockHistoryResponseObject); ok {
		return validResponse.VisitListEmployeeClockHistoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
