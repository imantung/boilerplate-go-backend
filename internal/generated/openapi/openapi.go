// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"context"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of employee.
	// (GET /employees)
	GetEmployees(ctx echo.Context) error
	// Create new employee
	// (POST /employees)
	PostEmployees(ctx echo.Context) error
	// Delete employee by ID
	// (DELETE /employees/{id})
	DeleteEmployeesId(ctx echo.Context, id int64) error
	// Get employee by ID
	// (GET /employees/{id})
	GetEmployeesId(ctx echo.Context, id int64) error
	// Partially update employee by ID
	// (PATCH /employees/{id})
	PatchEmployeesId(ctx echo.Context, id int64) error
	// Update employee by ID
	// (PUT /employees/{id})
	PutEmployeesId(ctx echo.Context, id int64) error
	// Employee start to work
	// (POST /employees/{id}/clock-in)
	PostEmployeesIdClockIn(ctx echo.Context, id int64) error
	// Employee stop to work
	// (POST /employees/{id}/clock-out)
	PostEmployeesIdClockOut(ctx echo.Context, id int64) error
	// Get employee clock history
	// (GET /employees/{id}/clocks)
	GetEmployeesIdClocks(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEmployees converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployees(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployees(ctx)
	return err
}

// PostEmployees converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployees(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEmployees(ctx)
	return err
}

// DeleteEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEmployeesId(ctx, id)
	return err
}

// GetEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployeesId(ctx, id)
	return err
}

// PatchEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEmployeesId(ctx, id)
	return err
}

// PutEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutEmployeesId(ctx, id)
	return err
}

// PostEmployeesIdClockIn converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployeesIdClockIn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"client"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEmployeesIdClockIn(ctx, id)
	return err
}

// PostEmployeesIdClockOut converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployeesIdClockOut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"client"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEmployeesIdClockOut(ctx, id)
	return err
}

// GetEmployeesIdClocks converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeesIdClocks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice", "client"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployeesIdClocks(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/employees", wrapper.GetEmployees)
	router.POST(baseURL+"/employees", wrapper.PostEmployees)
	router.DELETE(baseURL+"/employees/:id", wrapper.DeleteEmployeesId)
	router.GET(baseURL+"/employees/:id", wrapper.GetEmployeesId)
	router.PATCH(baseURL+"/employees/:id", wrapper.PatchEmployeesId)
	router.PUT(baseURL+"/employees/:id", wrapper.PutEmployeesId)
	router.POST(baseURL+"/employees/:id/clock-in", wrapper.PostEmployeesIdClockIn)
	router.POST(baseURL+"/employees/:id/clock-out", wrapper.PostEmployeesIdClockOut)
	router.GET(baseURL+"/employees/:id/clocks", wrapper.GetEmployeesIdClocks)

}

type GetEmployeesRequestObject struct {
}

type GetEmployeesResponseObject interface {
	VisitGetEmployeesResponse(w http.ResponseWriter) error
}

type GetEmployees200Response struct {
}

func (response GetEmployees200Response) VisitGetEmployeesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEmployeesRequestObject struct {
}

type PostEmployeesResponseObject interface {
	VisitPostEmployeesResponse(w http.ResponseWriter) error
}

type PostEmployees200Response struct {
}

func (response PostEmployees200Response) VisitPostEmployeesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteEmployeesIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteEmployeesIdResponseObject interface {
	VisitDeleteEmployeesIdResponse(w http.ResponseWriter) error
}

type DeleteEmployeesId204Response struct {
}

func (response DeleteEmployeesId204Response) VisitDeleteEmployeesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetEmployeesIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetEmployeesIdResponseObject interface {
	VisitGetEmployeesIdResponse(w http.ResponseWriter) error
}

type GetEmployeesId200Response struct {
}

func (response GetEmployeesId200Response) VisitGetEmployeesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchEmployeesIdRequestObject struct {
	Id int64 `json:"id"`
}

type PatchEmployeesIdResponseObject interface {
	VisitPatchEmployeesIdResponse(w http.ResponseWriter) error
}

type PatchEmployeesId200Response struct {
}

func (response PatchEmployeesId200Response) VisitPatchEmployeesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutEmployeesIdRequestObject struct {
	Id int64 `json:"id"`
}

type PutEmployeesIdResponseObject interface {
	VisitPutEmployeesIdResponse(w http.ResponseWriter) error
}

type PutEmployeesId200Response struct {
}

func (response PutEmployeesId200Response) VisitPutEmployeesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEmployeesIdClockInRequestObject struct {
	Id int64 `json:"id"`
}

type PostEmployeesIdClockInResponseObject interface {
	VisitPostEmployeesIdClockInResponse(w http.ResponseWriter) error
}

type PostEmployeesIdClockIn200Response struct {
}

func (response PostEmployeesIdClockIn200Response) VisitPostEmployeesIdClockInResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEmployeesIdClockOutRequestObject struct {
	Id int64 `json:"id"`
}

type PostEmployeesIdClockOutResponseObject interface {
	VisitPostEmployeesIdClockOutResponse(w http.ResponseWriter) error
}

type PostEmployeesIdClockOut200Response struct {
}

func (response PostEmployeesIdClockOut200Response) VisitPostEmployeesIdClockOutResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetEmployeesIdClocksRequestObject struct {
	Id int64 `json:"id"`
}

type GetEmployeesIdClocksResponseObject interface {
	VisitGetEmployeesIdClocksResponse(w http.ResponseWriter) error
}

type GetEmployeesIdClocks200Response struct {
}

func (response GetEmployeesIdClocks200Response) VisitGetEmployeesIdClocksResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns a list of employee.
	// (GET /employees)
	GetEmployees(ctx context.Context, request GetEmployeesRequestObject) (GetEmployeesResponseObject, error)
	// Create new employee
	// (POST /employees)
	PostEmployees(ctx context.Context, request PostEmployeesRequestObject) (PostEmployeesResponseObject, error)
	// Delete employee by ID
	// (DELETE /employees/{id})
	DeleteEmployeesId(ctx context.Context, request DeleteEmployeesIdRequestObject) (DeleteEmployeesIdResponseObject, error)
	// Get employee by ID
	// (GET /employees/{id})
	GetEmployeesId(ctx context.Context, request GetEmployeesIdRequestObject) (GetEmployeesIdResponseObject, error)
	// Partially update employee by ID
	// (PATCH /employees/{id})
	PatchEmployeesId(ctx context.Context, request PatchEmployeesIdRequestObject) (PatchEmployeesIdResponseObject, error)
	// Update employee by ID
	// (PUT /employees/{id})
	PutEmployeesId(ctx context.Context, request PutEmployeesIdRequestObject) (PutEmployeesIdResponseObject, error)
	// Employee start to work
	// (POST /employees/{id}/clock-in)
	PostEmployeesIdClockIn(ctx context.Context, request PostEmployeesIdClockInRequestObject) (PostEmployeesIdClockInResponseObject, error)
	// Employee stop to work
	// (POST /employees/{id}/clock-out)
	PostEmployeesIdClockOut(ctx context.Context, request PostEmployeesIdClockOutRequestObject) (PostEmployeesIdClockOutResponseObject, error)
	// Get employee clock history
	// (GET /employees/{id}/clocks)
	GetEmployeesIdClocks(ctx context.Context, request GetEmployeesIdClocksRequestObject) (GetEmployeesIdClocksResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetEmployees operation middleware
func (sh *strictHandler) GetEmployees(ctx echo.Context) error {
	var request GetEmployeesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEmployees(ctx.Request().Context(), request.(GetEmployeesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEmployees")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEmployeesResponseObject); ok {
		return validResponse.VisitGetEmployeesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEmployees operation middleware
func (sh *strictHandler) PostEmployees(ctx echo.Context) error {
	var request PostEmployeesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEmployees(ctx.Request().Context(), request.(PostEmployeesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEmployees")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEmployeesResponseObject); ok {
		return validResponse.VisitPostEmployeesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteEmployeesId operation middleware
func (sh *strictHandler) DeleteEmployeesId(ctx echo.Context, id int64) error {
	var request DeleteEmployeesIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEmployeesId(ctx.Request().Context(), request.(DeleteEmployeesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEmployeesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteEmployeesIdResponseObject); ok {
		return validResponse.VisitDeleteEmployeesIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEmployeesId operation middleware
func (sh *strictHandler) GetEmployeesId(ctx echo.Context, id int64) error {
	var request GetEmployeesIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEmployeesId(ctx.Request().Context(), request.(GetEmployeesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEmployeesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEmployeesIdResponseObject); ok {
		return validResponse.VisitGetEmployeesIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchEmployeesId operation middleware
func (sh *strictHandler) PatchEmployeesId(ctx echo.Context, id int64) error {
	var request PatchEmployeesIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchEmployeesId(ctx.Request().Context(), request.(PatchEmployeesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchEmployeesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchEmployeesIdResponseObject); ok {
		return validResponse.VisitPatchEmployeesIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutEmployeesId operation middleware
func (sh *strictHandler) PutEmployeesId(ctx echo.Context, id int64) error {
	var request PutEmployeesIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutEmployeesId(ctx.Request().Context(), request.(PutEmployeesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEmployeesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutEmployeesIdResponseObject); ok {
		return validResponse.VisitPutEmployeesIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEmployeesIdClockIn operation middleware
func (sh *strictHandler) PostEmployeesIdClockIn(ctx echo.Context, id int64) error {
	var request PostEmployeesIdClockInRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEmployeesIdClockIn(ctx.Request().Context(), request.(PostEmployeesIdClockInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEmployeesIdClockIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEmployeesIdClockInResponseObject); ok {
		return validResponse.VisitPostEmployeesIdClockInResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEmployeesIdClockOut operation middleware
func (sh *strictHandler) PostEmployeesIdClockOut(ctx echo.Context, id int64) error {
	var request PostEmployeesIdClockOutRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEmployeesIdClockOut(ctx.Request().Context(), request.(PostEmployeesIdClockOutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEmployeesIdClockOut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEmployeesIdClockOutResponseObject); ok {
		return validResponse.VisitPostEmployeesIdClockOutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEmployeesIdClocks operation middleware
func (sh *strictHandler) GetEmployeesIdClocks(ctx echo.Context, id int64) error {
	var request GetEmployeesIdClocksRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEmployeesIdClocks(ctx.Request().Context(), request.(GetEmployeesIdClocksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEmployeesIdClocks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEmployeesIdClocksResponseObject); ok {
		return validResponse.VisitGetEmployeesIdClocksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
