// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of employee.
	// (GET /employees)
	GetEmployees(ctx echo.Context) error
	// Create new employee
	// (POST /employees)
	PostEmployees(ctx echo.Context) error
	// Delete employee by ID
	// (DELETE /employees/{id})
	DeleteEmployeesId(ctx echo.Context, id int64) error
	// Get employee by ID
	// (GET /employees/{id})
	GetEmployeesId(ctx echo.Context, id int64) error
	// Partially update employee by ID
	// (PATCH /employees/{id})
	PatchEmployeesId(ctx echo.Context, id int64) error
	// Update employee by ID
	// (PUT /employees/{id})
	PutEmployeesId(ctx echo.Context, id int64) error
	// Employee start to work
	// (POST /employees/{id}/clock-in)
	PostEmployeesIdClockIn(ctx echo.Context, id int64) error
	// Employee stop to work
	// (POST /employees/{id}/clock-out)
	PostEmployeesIdClockOut(ctx echo.Context, id int64) error
	// Get employee clock history
	// (GET /employees/{id}/clocks)
	GetEmployeesIdClocks(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEmployees converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployees(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployees(ctx)
	return err
}

// PostEmployees converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployees(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEmployees(ctx)
	return err
}

// DeleteEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEmployeesId(ctx, id)
	return err
}

// GetEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployeesId(ctx, id)
	return err
}

// PatchEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEmployeesId(ctx, id)
	return err
}

// PutEmployeesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutEmployeesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutEmployeesId(ctx, id)
	return err
}

// PostEmployeesIdClockIn converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployeesIdClockIn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"client"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEmployeesIdClockIn(ctx, id)
	return err
}

// PostEmployeesIdClockOut converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployeesIdClockOut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"client"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEmployeesIdClockOut(ctx, id)
	return err
}

// GetEmployeesIdClocks converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeesIdClocks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OAuth2Scopes, []string{"backoffice", "client"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEmployeesIdClocks(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/employees", wrapper.GetEmployees)
	router.POST(baseURL+"/employees", wrapper.PostEmployees)
	router.DELETE(baseURL+"/employees/:id", wrapper.DeleteEmployeesId)
	router.GET(baseURL+"/employees/:id", wrapper.GetEmployeesId)
	router.PATCH(baseURL+"/employees/:id", wrapper.PatchEmployeesId)
	router.PUT(baseURL+"/employees/:id", wrapper.PutEmployeesId)
	router.POST(baseURL+"/employees/:id/clock-in", wrapper.PostEmployeesIdClockIn)
	router.POST(baseURL+"/employees/:id/clock-out", wrapper.PostEmployeesIdClockOut)
	router.GET(baseURL+"/employees/:id/clocks", wrapper.GetEmployeesIdClocks)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SXQW/qOBDHv4o15yyhtNpDbl2oKrSHVlv1VHFwnYFYJB6vPaHKonz3lR0ItMBSsU9P",
	"T+0pZJzY//nNP/awBkWVJYOGPWRr8Khqp7l5UgVWGEMPtzUXo/BrXtJbDMmaC3L6H8mazJhyPAg+uxIy",
	"SCkE0+0IQgJeke3mfZVqSfO5VggZ3Dtp2ItdTEil0HtIQJUaDe+e6e63420CTEt8v2CMQBvGGhumj+ER",
	"tCGkzZzC+qy5DGN3lS2pQRTjktRSm4V4ajxjBQms0HlNBjIYDq7CUmTRSKshg+vBcDCCBKzkIqaT4mae",
	"eLdADhey6CKPaR4SQL7rH0rAobdkfPfCaDgMlxy9ctpyt+rDnzGJbVEge9mV42Uf4KydJeDrqpKugQz+",
	"Qq6d8UKKUnsWNBdbcQNIgOXCh/f/2MGeSF+8knQ5zNoELPkj6h/J/yT5Y4eSURh863Wfl90meyVI1zpv",
	"O0ElMh4mM4nxPp1pHkvpZIWMzkel73N59ujEdALBP5DFskMCRlbBQjqPPP6utcMcMnY1BqcXWMn43ZCr",
	"ZHCwNvz7DfSu1IZxgQ7akP4HnDeHOH29sfwlTLuEe57itemyOWuGs07+9dgNfzC7e+QLwFnJqjjyGYXw",
	"N4L3KB1rWZaNqG0uL7KgrY9tR/V3suDzZewON8VUhVPut0Bh/ZmNfprHY3FqvgbhTTPxgW7fAniWjgWT",
	"eCO33MM77nqOW2tLrSKp/4JLnV8/T/eh5m+Cl+z/pfu59moD1n+5fSE5wfjdGRVBiUJ7Jtec2yWSE/yj",
	"HLc6zm2CK1GSkqVAs9KOTBU0JVDHNrxgtlmaxgcK8pxdXY+u09A4B9EbNR+nvH2cijm5vr/fqRG6siWG",
	"FTpxfYGOCG+TU/Pu/bfIt8mfnPkoqXbW/hsAAP//LuPLKjANAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
