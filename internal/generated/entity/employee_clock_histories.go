// Code generated by `tools/entity-gen`. DO NOT EDIT.
package entity

import (
	"context"
	"database/sql"
	"fmt"
	"time"

	"github.com/imantung/boilerplate-go-backend/internal/app/infra/di"
	"github.com/imantung/boilerplate-go-backend/pkg/sqkit"
	"github.com/imantung/dbtxn"

	sq "github.com/Masterminds/squirrel"
)

var (
	EmployeeClockHistoryTableName = "employee_clock_histories"
	EmployeeClockHistoryColumns   = struct {
		ID                  string
		EmployeeID          string
		ClockInAt           string
		ClockOutAt          string
		WorkDuration        string
		WorkDurationMinutes string
		DeletedAt           string
		UpdatedAt           string
		CreatedAt           string
	}{
		ID:                  "id",
		EmployeeID:          "employee_id",
		ClockInAt:           "clock_in_at",
		ClockOutAt:          "clock_out_at",
		WorkDuration:        "work_duration",
		WorkDurationMinutes: "work_duration_minutes",
		DeletedAt:           "deleted_at",
		UpdatedAt:           "updated_at",
		CreatedAt:           "created_at",
	}
)

type (
	EmployeeClockHistory struct {
		ID                  int        `column:"id"`
		EmployeeID          string     `column:"employee_id"`
		ClockInAt           *time.Time `column:"clock_in_at"`
		ClockOutAt          *time.Time `column:"clock_out_at"`
		WorkDuration        *string    `column:"work_duration"`
		WorkDurationMinutes *int       `column:"work_duration_minutes"`
		DeletedAt           *time.Time `column:"deleted_at"`
		UpdatedAt           time.Time  `column:"updated_at"`
		CreatedAt           time.Time  `column:"created_at"`
	}
	EmployeeClockHistoryRepo interface {
		Count(context.Context, ...sqkit.SelectOption) (int64, error)
		Select(context.Context, ...sqkit.SelectOption) ([]*EmployeeClockHistory, error)
		Insert(context.Context, *EmployeeClockHistory) (int, error)
		SoftDelete(context.Context, int) (int64, error)
		Update(context.Context, *EmployeeClockHistory, ...sqkit.UpdateOption) (int64, error)
		Patch(context.Context, *EmployeeClockHistory, ...sqkit.UpdateOption) (int64, error)
	}
	EmployeeClockHistoryRepoImpl struct {
		*sql.DB
	}
)

var _ = di.Provide(NewEmployeeClockHistoryRepo)

func NewEmployeeClockHistoryRepo(db *sql.DB) EmployeeClockHistoryRepo {
	return &EmployeeClockHistoryRepoImpl{
		DB: db,
	}
}

func (r *EmployeeClockHistoryRepoImpl) Count(ctx context.Context, opts ...sqkit.SelectOption) (int64, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}
	builder := sq.
		Select("count(1)").
		From("employee_clock_histories").
		Where(sq.Eq{"deleted_at": nil}).
		RunWith(txn)

	for _, opt := range opts {
		builder = opt.CompileSelect(builder)
	}

	row := builder.QueryRowContext(ctx)

	var cnt int64
	if err := row.Scan(&cnt); err != nil {
		return -1, err
	}
	return cnt, nil
}

func (r *EmployeeClockHistoryRepoImpl) Select(ctx context.Context, opts ...sqkit.SelectOption) ([]*EmployeeClockHistory, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return nil, err
	}
	builder := sq.
		Select(
			"id",
			"employee_id",
			"clock_in_at",
			"clock_out_at",
			"work_duration",
			"work_duration_minutes",
			"deleted_at",
			"updated_at",
			"created_at",
		).
		From("employee_clock_histories").
		Where(sq.Eq{"deleted_at": nil}).
		PlaceholderFormat(sq.Dollar).
		RunWith(txn)

	for _, opt := range opts {
		builder = opt.CompileSelect(builder)
	}

	rows, err := builder.QueryContext(ctx)
	if err != nil {
		return nil, err
	}

	list := make([]*EmployeeClockHistory, 0)
	for rows.Next() {
		ent := new(EmployeeClockHistory)
		err := rows.Scan(
			&ent.ID,
			&ent.EmployeeID,
			&ent.ClockInAt,
			&ent.ClockOutAt,
			&ent.WorkDuration,
			&ent.WorkDurationMinutes,
			&ent.DeletedAt,
			&ent.UpdatedAt,
			&ent.CreatedAt,
		)
		if err != nil {
			return nil, err
		}
		list = append(list, ent)
	}
	return list, nil
}

func (r *EmployeeClockHistoryRepoImpl) Insert(ctx context.Context, ent *EmployeeClockHistory) (int, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}

	builder := sq.
		Insert("employee_clock_histories").
		Columns(
			"employee_id",
			"clock_in_at",
			"clock_out_at",
			"work_duration",
			"work_duration_minutes",
		).
		Suffix(
			fmt.Sprintf("RETURNING \"%s\"", "id"),
		).
		PlaceholderFormat(sq.Dollar).
		Values(
			ent.EmployeeID,
			ent.ClockInAt,
			ent.ClockOutAt,
			ent.WorkDuration,
			ent.WorkDurationMinutes,
		)

	scanner := builder.RunWith(txn).QueryRowContext(ctx)

	var id int
	if err := scanner.Scan(&id); err != nil {
		txn.AppendError(err)
		return -1, err
	}
	return id, nil
}

func (r *EmployeeClockHistoryRepoImpl) Update(ctx context.Context, ent *EmployeeClockHistory, opts ...sqkit.UpdateOption) (int64, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}

	builder := sq.
		Update("employee_clock_histories").
		Set("employee_id", ent.EmployeeID).
		Set("clock_in_at", ent.ClockInAt).
		Set("clock_out_at", ent.ClockOutAt).
		Set("work_duration", ent.WorkDuration).
		Set("work_duration_minutes", ent.WorkDurationMinutes).
		Set("updated_at", "now()").
		PlaceholderFormat(sq.Dollar).
		RunWith(txn)

	for _, opt := range opts {
		builder = opt.CompileUpdate(builder)
	}

	res, err := builder.ExecContext(ctx)
	if err != nil {
		txn.AppendError(err)
		return -1, err
	}
	affectedRow, err := res.RowsAffected()
	txn.AppendError(err)
	return affectedRow, err
}

func (r *EmployeeClockHistoryRepoImpl) Patch(ctx context.Context, ent *EmployeeClockHistory, opts ...sqkit.UpdateOption) (int64, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}

	builder := sq.
		Update("employee_clock_histories").
		PlaceholderFormat(sq.Dollar).
		RunWith(txn)

	if !sqkit.IsZero(ent.EmployeeID) {
		builder = builder.Set("employee_id", ent.EmployeeID)
	}
	if !sqkit.IsZero(ent.ClockInAt) {
		builder = builder.Set("clock_in_at", ent.ClockInAt)
	}
	if !sqkit.IsZero(ent.ClockOutAt) {
		builder = builder.Set("clock_out_at", ent.ClockOutAt)
	}
	if !sqkit.IsZero(ent.WorkDuration) {
		builder = builder.Set("work_duration", ent.WorkDuration)
	}
	if !sqkit.IsZero(ent.WorkDurationMinutes) {
		builder = builder.Set("work_duration_minutes", ent.WorkDurationMinutes)
	}

	builder = builder.Set("updated_at", "now()")

	for _, opt := range opts {
		builder = opt.CompileUpdate(builder)
	}

	res, err := builder.ExecContext(ctx)
	if err != nil {
		txn.AppendError(err)
		return -1, err
	}

	affectedRow, err := res.RowsAffected()
	txn.AppendError(err)
	return affectedRow, err
}

func (r *EmployeeClockHistoryRepoImpl) SoftDelete(ctx context.Context, id int) (int64, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}

	builder := sq.
		Update("employee_clock_histories").
		Set("deleted_at", "now()").
		Where(sq.Eq{"id": id}).
		PlaceholderFormat(sq.Dollar).
		RunWith(txn)

	res, err := builder.ExecContext(ctx)
	if err != nil {
		txn.AppendError(err)
		return -1, err
	}
	affectedRow, err := res.RowsAffected()
	txn.AppendError(err)

	return affectedRow, nil
}
