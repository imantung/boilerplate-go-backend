// Code generated by `tools/entity-gen`. DO NOT EDIT.
package entity

import (
	"context"
	"database/sql"
	"time"

	"github.com/imantung/boilerplate-go-backend/internal/app/infra/di"
	"github.com/imantung/boilerplate-go-backend/pkg/repokit"
	"github.com/imantung/dbtxn"

	sq "github.com/Masterminds/squirrel"
)

var (
	Oauth2TokenTableName = "oauth2_tokens"
	Oauth2TokenColumns   = struct {
		ID        string
		ExpiresAt string
		Code      string
		Access    string
		Refresh   string
		DeletedAt string
		UpdatedAt string
		CreatedAt string
	}{
		ID:        "id",
		ExpiresAt: "expires_at",
		Code:      "code",
		Access:    "access",
		Refresh:   "refresh",
		DeletedAt: "deleted_at",
		UpdatedAt: "updated_at",
		CreatedAt: "created_at",
	}
)

type (
	Oauth2Token struct {
		ID        int        `column:"id"`
		ExpiresAt time.Time  `column:"expires_at"`
		Code      string     `column:"code"`
		Access    string     `column:"access"`
		Refresh   string     `column:"refresh"`
		DeletedAt *time.Time `column:"deleted_at"`
		UpdatedAt time.Time  `column:"updated_at"`
		CreatedAt time.Time  `column:"created_at"`
	}
	Oauth2TokenRepo interface {
		Count(context.Context, ...repokit.SelectOption) (int64, error)
		Select(context.Context, ...repokit.SelectOption) ([]*Oauth2Token, error)
		Insert(context.Context, *Oauth2Token) (int, error)
		SoftDelete(context.Context, int) (int64, error)
		Update(context.Context, *Oauth2Token, ...repokit.UpdateOption) (int64, error)
		Patch(context.Context, *Oauth2Token, ...repokit.UpdateOption) (int64, error)
	}
	Oauth2TokenRepoImpl struct {
		*sql.DB
	}
)

var _ = di.Provide(NewOauth2TokenRepo)

func NewOauth2TokenRepo(db *sql.DB) Oauth2TokenRepo {
	return &Oauth2TokenRepoImpl{
		DB: db,
	}
}

func (r *Oauth2TokenRepoImpl) Count(ctx context.Context, opts ...repokit.SelectOption) (int64, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}
	builder := sq.
		Select("count(1)").
		From("oauth2_tokens").
		Where(sq.Eq{"deleted_at": nil}).
		RunWith(txn)

	for _, opt := range opts {
		builder = opt.CompileSelect(builder)
	}

	row := builder.QueryRowContext(ctx)

	var cnt int64
	if err := row.Scan(&cnt); err != nil {
		return -1, err
	}
	return cnt, nil
}

func (r *Oauth2TokenRepoImpl) Select(ctx context.Context, opts ...repokit.SelectOption) ([]*Oauth2Token, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return nil, err
	}
	builder := sq.
		Select(
			"id",
			"expires_at",
			"code",
			"access",
			"refresh",
			"deleted_at",
			"updated_at",
			"created_at",
		).
		From("oauth2_tokens").
		Where(sq.Eq{"deleted_at": nil}).
		PlaceholderFormat(sq.Dollar).
		RunWith(txn)

	for _, opt := range opts {
		builder = opt.CompileSelect(builder)
	}

	rows, err := builder.QueryContext(ctx)
	if err != nil {
		return nil, err
	}

	list := make([]*Oauth2Token, 0)
	for rows.Next() {
		ent := new(Oauth2Token)
		err := rows.Scan(
			&ent.ID,
			&ent.ExpiresAt,
			&ent.Code,
			&ent.Access,
			&ent.Refresh,
			&ent.DeletedAt,
			&ent.UpdatedAt,
			&ent.CreatedAt,
		)
		if err != nil {
			return nil, err
		}
		list = append(list, ent)
	}
	return list, nil
}

func (r *Oauth2TokenRepoImpl) Insert(ctx context.Context, ent *Oauth2Token) (int, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}

	builder := sq.
		Insert("oauth2_tokens").
		Columns(
			"expires_at",
			"code",
			"access",
			"refresh",
		).
		Suffix(
			"RETURNING id",
		).
		PlaceholderFormat(sq.Dollar).
		Values(
			ent.ExpiresAt,
			ent.Code,
			ent.Access,
			ent.Refresh,
		)

	scanner := builder.RunWith(txn).QueryRowContext(ctx)

	var id int
	if err := scanner.Scan(&id); err != nil {
		txn.AppendError(err)
		return -1, err
	}
	return id, nil
}

func (r *Oauth2TokenRepoImpl) Update(ctx context.Context, ent *Oauth2Token, opts ...repokit.UpdateOption) (int64, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}

	builder := sq.
		Update("oauth2_tokens").
		Set("expires_at", ent.ExpiresAt).
		Set("code", ent.Code).
		Set("access", ent.Access).
		Set("refresh", ent.Refresh).
		Set("updated_at", "now()").
		PlaceholderFormat(sq.Dollar).
		RunWith(txn)

	for _, opt := range opts {
		builder = opt.CompileUpdate(builder)
	}

	res, err := builder.ExecContext(ctx)
	if err != nil {
		txn.AppendError(err)
		return -1, err
	}
	affectedRow, err := res.RowsAffected()
	txn.AppendError(err)
	return affectedRow, err
}

func (r *Oauth2TokenRepoImpl) Patch(ctx context.Context, ent *Oauth2Token, opts ...repokit.UpdateOption) (int64, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}

	builder := sq.
		Update("oauth2_tokens").
		PlaceholderFormat(sq.Dollar).
		RunWith(txn)

	if !repokit.IsZero(ent.ExpiresAt) {
		builder = builder.Set("expires_at", ent.ExpiresAt)
	}
	if !repokit.IsZero(ent.Code) {
		builder = builder.Set("code", ent.Code)
	}
	if !repokit.IsZero(ent.Access) {
		builder = builder.Set("access", ent.Access)
	}
	if !repokit.IsZero(ent.Refresh) {
		builder = builder.Set("refresh", ent.Refresh)
	}

	builder = builder.Set("updated_at", "now()")

	for _, opt := range opts {
		builder = opt.CompileUpdate(builder)
	}

	res, err := builder.ExecContext(ctx)
	if err != nil {
		txn.AppendError(err)
		return -1, err
	}

	affectedRow, err := res.RowsAffected()
	txn.AppendError(err)
	return affectedRow, err
}

func (r *Oauth2TokenRepoImpl) SoftDelete(ctx context.Context, id int) (int64, error) {
	txn, err := dbtxn.Use(ctx, r.DB)
	if err != nil {
		return -1, err
	}

	builder := sq.
		Update("oauth2_tokens").
		Set("deleted_at", "now()").
		Where(sq.Eq{"id": id}).
		PlaceholderFormat(sq.Dollar).
		RunWith(txn)

	res, err := builder.ExecContext(ctx)
	if err != nil {
		txn.AppendError(err)
		return -1, err
	}
	affectedRow, err := res.RowsAffected()
	txn.AppendError(err)

	return affectedRow, nil
}
